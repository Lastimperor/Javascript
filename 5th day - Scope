Scope defines where variables can be accessed or referenced. 
While some variables can be accessed from anywhere within a program, other variables may only be available in a specific context.

- Blocks and Scope

A block is the code found inside a set of curly braces {}. 
Blocks help us group one or more statements together and serve as an important structural marker for our code.

A block of code could be a function, like this:

const logSkyColor = () => {
  let color = 'blue'; 
  console.log(color); // blue 
};

Notice that the function body is actually a block of code.

Observe the block in an if statement:

if (dusk) {
  let color = 'pink';
  console.log(color); // pink
};

blocks define the scope of variables.

- Global Scope

Scope is the context in which our variables are declared. 
We think about scope in relation to blocks because variables can exist either outside of or within these blocks.

In global scope, variables are declared outside of blocks. 
These variables are called global variables. 
Because global variables are not bound inside a block, they can be accessed by any code in the program, including code in blocks.

const color = 'blue'

const returnSkyColor = () => {
  return color; // blue 
};

console.log(returnSkyColor()); // blue

- Block Scope

The next context we’ll cover is block scope. 
When a variable is defined inside a block, it is only accessible to the code within the curly braces {}.
We say that variable has block scope because it is only accessible to the lines of code within that block.

Variables that are declared with block scope are known as local variables.
They are only available to the code that is part of the same block.

Block scope works like this:

const logSkyColor = () => {
  let color = 'blue'; 
  console.log(color); // blue 
};

logSkyColor(); // blue 
console.log(color); // ReferenceError

- Scope Pollution

having too many global variables can cause problems in a program.
When you declare global variables, they go to the global namespace. 
The global namespace allows the variables to be accessible from anywhere in the program. 
These variables remain there until the program finishes which means our global namespace can fill up really quickly.

Scope pollution is when we have too many global variables that exist in the global namespace, or when we reuse variables across different scopes. 

let num = 50;

const logNum = () => {
  num = 100; // Take note of this line of code
  console.log(num);
};

logNum(); // Prints 100
console.log(num); // Prints 100

When we call logNum(), num gets reassigned to 100.
it’s best practice to not define variables in the global scope.

- Practice Good Scoping

Tightly scoping your variables will greatly improve your code in several ways:

legibility, since the blocks will organize your code into discrete sections.
understandability, since it clarifies which variables are associated with different parts of the program 
It’s easier to maintain your code, since your code will be modular.
It will save memory in your code because it will cease to exist after the block finishes running.

const logSkyColor = () => {
  const dusk = true;
  let color = 'blue'; 
  if (dusk) {
    let color = 'pink';
    console.log(color); // pink
  }
  console.log(color); // blue 
};

console.log(color); // ReferenceError

