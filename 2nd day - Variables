- Variables

In programming, a variable is a container for a value.

In short, variables label and store data in memory. 
There are only a few things you can do with variables:

Create a variable with a descriptive name.
Store or update information stored in a variable.
Reference or “get” information stored in a variable.

- Create a Variable: var

There were a lot of changes introduced in the ES6 version of JavaScript in 2015. 
One of the biggest changes was two new keywords, let and const, to create, or declare, variables. 
Prior to the ES6, programmers could only use the var keyword to declare variables.

var myName = 'Arya';
console.log(myName);
// Output: Arya

1) var, short for variable, is a JavaScript keyword that creates, or declares, a new variable.

2) myName is the variable’s name. Capitalizing in this way is a standard convention in JavaScript called 'camel casing'. 
In camel casing you group words into one, the first word is lowercase, then every word that follows will have its first letter uppercased. 
(e.g. camelCaseEverything).

3) = is the assignment operator. It assigns the value ('Arya') to the variable (myName).

4) 'Arya' is the value assigned (=) to the variable myName. You can also say that the myName variable is initialized with a value of 'Arya'.

5) After the variable is declared, the string value 'Arya' is printed to the console by referencing the variable name: console.log(myName).

There are a few general rules for naming variables:

Variable names cannot start with numbers.
Variable names are case sensitive, so myName and myname would be different variables. 
  It is bad practice to create two variables that have the same name using different cases.
Variable names cannot be the same as keywords. For a comprehensive list of keywords check out MDN’s keyword documentation.

- Create a Variable: let

The let keyword signals that the variable can be reassigned a different value. Take a look at the example:

let meal = 'Enchiladas';
console.log(meal); // Output: Enchiladas
meal = 'Burrito';
console.log(meal); // Output: Burrito

we can declare a variable without assigning the variable a value. 
In such a case, the variable will be automatically initialized with a value of undefined:

let price;
console.log(price); // Output: undefined
price = 350;
console.log(price); // Output: 350
Notice in the example above:

If we don’t assign a value to a variable declared using the let keyword, it automatically has a value of undefined.
We can reassign the value of the variable.

- Create a Variable: const

The way you declare a const variable and assign a value to it follows the same structure as let and var.

However, a const variable cannot be reassigned because it is constant. If you try to reassign a const variable, you’ll get a TypeError.

Constant variables must be assigned a value when declared. If you try to declare a const variable without a value, you’ll get a SyntaxError.

If you’re trying to decide between which keyword to use, let or const, think about whether you’ll need to reassign the variable later on. 
If you do need to reassign the variable use let, otherwise, use const.

- Mathematical Assignment Operators

let w = 4;
w = w + 1;

console.log(w); // Output: 5

We could re-write the code above to be:

let w = 4;
w += 1;

console.log(w); // Output: 5

We also have access to other mathematical assignment operators: -=, *=, and /= which work in a similar fashion.

- The Increment and Decrement Operator

Other mathematical assignment operators include the increment operator (++) and decrement operator (--).

The increment operator will increase the value of the variable by 1. 
The decrement operator will decrease the value of the variable by 1. 

let a = 10;
a++;
console.log(a); // Output: 11
let b = 20;
b--;
console.log(b); // Output: 19

- String Concatenation with Variables

The + operator can be used to combine two string values even if those values are being stored in variables:

let myPet = 'armadillo';
console.log('I own a pet ' + myPet + '.'); 
// Output: 'I own a pet armadillo.'

- String Interpolation

In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals. 

const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`);
// Output: I own a pet armadillo.

a template literal is wrapped by backticks ` (this key is usually located on the top of your keyboard, left of the 1 key).
Inside the template literal, you’ll see a placeholder, ${myPet}. The value of myPet is inserted into the template literal.
When we interpolate `I own a pet ${myPet}.`, the output we print is the string: 'I own a pet armadillo.'

- typeof operator

If you need to check the data type of a variable’s value, you can use the typeof operator.

The typeofoperator checks the value to its right and returns, or passes back, a string of the data type.

const unknown1 = 'foo';
console.log(typeof unknown1); // Output: string

const unknown2 = 10;
console.log(typeof unknown2); // Output: number

const unknown3 = true; 
console.log(typeof unknown3); // Output: boolean




