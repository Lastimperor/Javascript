JavaScript is a powerful, flexible, and fast programming language now being used for increasingly complex web development and beyond!

- Console

The console is a panel that displays important messages, like errors, for developers. 
Much of the work the computer does with our code is invisible to us by default. 
If we want to see things appear on our screen, we can print, or log, to our console directly.

In JavaScript, the console keyword refers to an object, a collection of data and actions, that we can use in our code. 
Keywords are words that are built into the JavaScript language, so the computer will recognize them and treats them specially.

One action, or method, that is built into the console object is the .log() method. 
When we write console.log() what we put inside the parentheses will get printed, or logged, to the console.

console.log(5); 

- Comments

 we can write comments in our code that the computer will ignore as our program runs.
 
 There are two types of code comments in JavaScript:

A single line comment will comment out a single line and is denoted with two forward slashes // preceding it.

// Prints 5 to the console
console.log(5);

You can also use a single line comment to comment after a line of code:

console.log(5);  // Prints 5 
A multi-line comment will comment out multiple lines and is denoted with /* to begin the comment, and */ to end the comment.

/*
This is all commented 
console.log(10);
None of this is going to run!
console.log(99);
*/

You can also use this syntax to comment something out in the middle of a line of code:

console.log(/*IGNORED!*/ 5);  // Still just prints 5 

- Data Types

Data types are the classifications we give to the different kinds of data that we use in programming. 
In JavaScript, there are seven fundamental data types:

1) Number: Any number, including numbers with decimals: 4, 8, 1516, 23.42.
2) String: Any grouping of characters on your keyboard (letters, numbers, symbols, etc.) surrounded by single quotes: ' ... ' or double quotes " ... ". 
   Though we prefer single quotes. Some people like to think of string as a fancy word for text.
3) Boolean: This data type only has two possible values— either true or false (without quotes). 
   It’s helpful to think of booleans as on and off switches or as the answers to a “yes” or “no” question.
4) Null: This data type represents the intentional absence of a value, and is represented by the keyword null (without quotes).
5) Undefined: This data type is denoted by the keyword undefined (without quotes). 
   It also represents the absence of a value though it has a different use than null.
6) Symbol: A newer feature to the language, symbols are unique identifiers, useful in more complex coding. 
   No need to worry about these for now.
7) Object: Collections of related data.

The first 6 of those types are considered primitive data types. They are the most basic data types in the language.

- Arithmetic Operators

An operator is a character that performs a task in our code. JavaScript has several built-in in arithmetic operators

Add: +
Subtract: -
Multiply: *
Divide: /
Remainder: %

The remainder operator, sometimes called modulo, returns the number that remains.
11 % 3 equals 2 because 3 fits into 11 three times, leaving 2 as the remainder.

- String Concatenation

Operators aren’t just for numbers! When a + operator is used on two strings, it appends the right string to the left string:

console.log('hi' + 'ya'); // Prints 'hiya'
console.log('wo' + 'ah'); // Prints 'woah'
console.log('I love to ' + 'code.')
// Prints 'I love to code.'

This process of appending one string to another is called concatenation. 
Notice in the third example we had to make sure to include a space at the end of the first string. 
The computer will join the strings exactly, so we needed to make sure to include the space we wanted between the two strings.

- Properties

When you introduce a new piece of data into a JavaScript program, the browser saves it as an instance of the data type. 
Every string instance has a property called length that stores the number of characters in that string. 
You can retrieve property information by appending the string with a period and the property name:

console.log('Hello'.length); // Prints 5

The . is another operator! We call it the dot operator.

- Methods

Remember that methods are actions we can perform. 
JavaScript provides a number of string methods.

We call these methods by appending an instance with a period (the dot operator), the name of the method, opening and closing parentheses: 

'example string'.methodName().

the .toUpperCase() method is called on the string instance.
This method returns a string in all capital letters

console.log('hello'.toUpperCase()); // Prints 'HELLO'

the .startsWith() method accepts an input, or argument, between the parentheses. 
if string instance starts with the input, the method returns the boolean true.

console.log('Hey'.startsWith('H')); // Prints true

several built-in string methods
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype

- Built-in Objects

In addition to console, there are other objects built into JavaScript.
!!!!!!!!!!! https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects

JavaScript has the built-in Math object.

The great thing about objects is that they have methods! Let’s call the .random() method from the built-in Math object:

console.log(Math.random()); // Prints a random number between 0 and 1

To generate a random number between 0 and 50, we could multiply this result by 50, like so:

Math.random() * 50;

Math.floor() takes a decimal number, and rounds down to the nearest whole number. 
You can use Math.floor() to round down a random number like this:

Math.floor(Math.random() * 50);

!!!!!!!!!!! JavaScript Math object methods
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math

!!!!!!!!!!! JavaScript Numbers object methods
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number



