- Arrays

Organizing and storing data is a foundational concept of programming.

One way we organize data in real life is by making lists.

write a list in JavaScript, as an array:

let newYearsResolutions = ['Keep a journal', 'Take a falconry class', 'Learn to juggle'];

Arrays are JavaScript’s way of making lists. 

Arrays can store any data types (including strings, numbers, and booleans). 
Like lists, arrays are ordered, meaning each item has a numbered position.

- Create an Array

One way we can create an array is to use an array literal.
An array literal creates an array by wrapping items in square brackets [].

Each content item inside an array is called an element.
There are three different elements inside the array.
Each element inside the array is a different data type.

We can also save an array to a variable.

- Accessing Elements

Each element in an array has a numbered position known as its index. 
We can access individual items using their index, which is similar to referencing an item in a list based on the item’s position.

Arrays in JavaScript are zero-indexed, meaning the positions start counting from 0 rather than 1.

array[0

using bracket notation, [] with the index after the name of the array to access the element.

You can also access individual characters in a string using bracket notation and the index. 

For instance, you can write:

const hello = 'Hello World';
console.log(hello[6]);
// Output: W

- Update Elements

Once you have access to an element in an array, you can update its value.

let seasons = ['Winter', 'Spring', 'Summer', 'Fall'];

seasons[3] = 'Autumn';
console.log(seasons); 
//Output: ['Winter', 'Spring', 'Summer', 'Autumn']

- Arrays with let and const

You may recall that you can declare variables with both the let and const keywords. 
Variables declared with let can be reassigned.

Variables declared with the const keyword cannot be reassigned. 
However, elements in an array declared with const remain mutable. 
Meaning that we can change the contents of a const array, but cannot reassign a new array or a different value.

You can reassign an element to another array using the following syntax:

let sampleArr = [1, 2, 3];
sampleArr = ['a string'];

- The .length property

One of an array’s built-in properties is length and it returns the number of items in the array.

const newYearsResolutions = ['Keep a journal', 'Take a falconry class'];

console.log(newYearsResolutions.length);
// Output: 2

- The .push() Method

.push() allows us to add items to the end of an array.

const itemTracker = ['item 0', 'item 1', 'item 2'];

itemTracker.push('item 3', 'item 4');

console.log(itemTracker); 
// Output: ['item 0', 'item 1', 'item 2', 'item 3', 'item 4'];

- The .pop() Method

Another array method, .pop(), removes the last item of an array.

const newItemTracker = ['item 0', 'item 1', 'item 2'];

const removed = newItemTracker.pop();

console.log(newItemTracker); 
// Output: [ 'item 0', 'item 1' ]
console.log(removed);
// Output: item 2

- More Array Methods

Some arrays methods that are available to JavaScript developers include: 
.join(), .slice(), .splice(), .shift(), .unshift(), and .concat() amongst many others. 
Using these built-in methods make it easier to do some common tasks when working with arrays.

Use the .shift() method to remove the first item from the array 
Use the .unshift() method to add a new item to the beginning of your array.
Use .slice() to provide a portion of the list
find the index of a particular element in groceryList using .indexOf().

- Arrays and Functions








